# 8.6 将函数存储到模块中
# 将函数存储在模块的独立文件中，再将模块导入到主程序
# import语句允许在当前运行的程序文件中使用模块中的代码
# 可隐藏程序代码细节，在众多程序中重用代码，共享文件

# 8.6.1 导入整个模块
# 只需编写一条import语句并在其中指定模块名，可在程序中使用该模块中的所有函数
print("8.6.1")

import pizza  # 让Python打开文件pizza.py文件，将其中所有函数都复制到这个程序中 通用语法—— import 模块

pizza.make_pizza(16,'青椒')
pizza.make_pizza(21,'火腿','西红柿','苹果')  # 指定模块名称和函数名可调用（用句号分隔









# 8.6.2 导入特定的函数
print("\n8.6.2")
from pizza import make_pizza # 导入模块中的特定函数，通用语法——from 模块 import 函数

from pizza import make_pizza,two  # 用逗号分隔函数名，根据需要从模块中导入任意数量的函数

two('xigua') # 若使用这种语法，调用函数时就无需使用句点，调用函数时只需指定其名称







# 8.6.3 使用 as 给函数指定别名
# 如果要导入的函数的名称可能与程序中现有的名称冲突，或者函数的名称太长，可指定简短而独一无二的别名
# 给函数指定这种特殊外号，需要在导入它时这样做

print("\n8.6.3")

from pizza import make_pizza as mp  # 指定别名，通用语法——from 模块 import 函数 as 别名

mp(16,'鲜虾披萨')
mp(31,'大披萨','中披萨')






# 8.6.4 使用as给模块指定别名
# 还可以给模块指定别名

print("\n8.6.4")

import pizza as p  # 给模块指定别名，通用语法——import 模块 as 别名

p.make_pizza(64,'爱上披萨')







# 8.6.5 导入模块中的所有函数
# 用*号运算符让python导入模块中所有函数
from pizza import * # 通用语法 from 模块 import *

print("\n8.6.5")

make_pizza(10,'所有披萨')
two(21)



# 提示：最好的做法是：要么只导入你需要使用的函数，要么导入整个模块并使用句点表示法










# 8.7 函数编写指南
# 1. 给函数指定描述性名称
# 2. 只在其中使用小写字母和下划线
# 3. 每个函数都应包含简要的阐述其功能的注释，采用文档字符串格式
# 4. 给形参指定默认值时，等号两边不要有空格：
# 5. 对于函数调用中的关键字实参，等号两边不要有空格：
# 6. 如果形参很多，在函数定义中输入左括号然后回车键，在线一行按两次Tab键
# 7. 程序或模块中包含多个函数，可使用两个空行将相邻的函数分开
# 8. 所有的import语句都应放在文件开头，唯一的例外是，在文件开头使用了注释来描述整个程序





